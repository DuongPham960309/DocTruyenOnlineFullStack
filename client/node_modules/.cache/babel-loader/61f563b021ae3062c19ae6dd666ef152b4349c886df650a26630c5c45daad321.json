{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\n\n//check the existence of window.data, if window.data exists, it will be renamed, this codes will be deleted when web is deployed\n//kiểm tra sự tồn tại của window.data, nếu window.data tồn tại, nó sẽ được đổi tên, đoạn code này sẽ được xóa khi web được triển khai\nif (window.data !== undefined) {\n  console.log(\"data has been defined in window object\");\n}\nwindow.data = {};\nif (window.tempData !== undefined) {\n  console.log(\"data has been defined in window object\");\n}\nwindow.tempData = {};\nif (window.lastUpdatedTime !== undefined) {\n  console.log(\"lastUpdatedTime has been defined in window object\");\n}\nwindow.lastUpdatedTime = {};\nif (window.setLastUpdatedTime !== undefined) {\n  console.log(\"setLastUpdatedTime has been defined in window object\");\n}\nwindow.setLastUpdatedTime = {\n  suggestedNovels: \"\",\n  selectedTranslationNovels: \"\",\n  updatedNovels: \"\",\n  fullNovels: \"\",\n  leftOfShortNovel: \"\",\n  rightOfShortNovels: \"\",\n  reviewNovels: \"\",\n  topGoodNovels: \"\",\n  newUpdateNovels: \"\",\n  trendNovelsInMonth: \"\"\n};\nexport const useUpdate = name => {\n  _s();\n  let setUpdatedTime = useState(window.lastUpdatedTime[name])[1];\n  let setUp = useRef(false);\n  if (setUp.current === false) {\n    window.setLastUpdatedTime[name] = setUpdatedTime;\n    setUp.current = true;\n  }\n};\n_s(useUpdate, \"HKrMh1EUBVX5oLMVx+q35+6gdco=\");\nconst propsSuggestedNovels = () => {\n  let length = Math.ceil(window.tempData.suggestedNovels.length / 3);\n  let carousels = new Array(length);\n  for (let i = 0; i < length; i++) {\n    carousels[i] = {\n      cssCarousel: \"carousel-item\",\n      novels: []\n    };\n  }\n  length = window.tempData.suggestedNovels.length;\n  for (let i = 0; i < length; i++) {\n    window.tempData.suggestedNovels[i].image = require(\"./images/\" + window.tempData.suggestedNovels[i].image);\n    titleNovel_(window.tempData.suggestedNovels[i]);\n    carousels[Math.floor(i / 3)].novels.push(window.tempData.suggestedNovels[i]);\n  }\n  carousels[0].cssCarousel = \"carousel-item active\";\n  window.data.suggestedNovels = carousels;\n};\nconst propsShowNovels = name => {\n  for (let i = 0; i < window.tempData[name].length; i++) {\n    window.tempData[name][i].image = require(\"./images/\" + window.tempData[name][i].image);\n  }\n  window.tempData[name].forEach(titleNovel_);\n  window.data[name] = window.tempData[name];\n};\nconst propsUpdatedNovels = () => {\n  window.tempData.updatedNovels.forEach(titleNovel_);\n  window.data.updatedNovels = window.tempData.updatedNovels;\n  let currentTime = new Date(\"2023-11-11T09:00:00Z\");\n  for (let i = 0; i < window.data.updatedNovels.length; i++) {\n    let lastTime = new Date(window.data.updatedNovels[i].last_time);\n    let millisecondsDelta = currentTime.getTime() - lastTime.getTime();\n    let time = Math.floor(millisecondsDelta / 86400000);\n    if (time > 0) {\n      window.data.updatedNovels[i].time = time + \" ngày trước\";\n    } else {\n      time = Math.floor(millisecondsDelta / 3600000);\n      if (time > 0) {\n        window.data.updatedNovels[i].time = time + \" giờ trước\";\n      } else {\n        time = Math.floor(millisecondsDelta / 60000);\n        if (time > 0) {\n          window.data.updatedNovels[i].time = time + \" phút trước\";\n        } else {\n          window.data.updatedNovels[i].time = \"mới cập nhật\";\n        }\n      }\n    }\n  }\n};\nconst titleNovel_ = novel => {\n  novel.title = novel.before !== \"\" ? novel.before + \" \" + novel.name : novel.name;\n  novel.title = novel.after !== \"\" ? novel.title + \" \" + novel.after : novel.title;\n};\nconst propsLeftOfShortNovel = () => {\n  window.tempData.leftOfShortNovel.image = require(\"./images/\" + window.tempData.leftOfShortNovel.image);\n  window.data.leftOfShortNovel = window.tempData.leftOfShortNovel;\n};\nconst propsRightOfShortNovels = () => {\n  propsSimpleListOfNovels(\"rightOfShortNovels\", \"d-flex pb-short-novel\");\n};\nconst propsReviewNovels = () => {\n  propsSimpleListOfNovels(\"reviewNovels\", \"d-flex p-short-novel\");\n};\nconst propsSimpleListOfNovels = (name, cssContainer) => {\n  for (let i = 0; i < window.tempData[name].length; i++) {\n    window.tempData[name][i].image = require(\"./images/\" + window.tempData[name][i].image);\n    window.tempData[name][i].cssContainer = cssContainer;\n  }\n  window.data[name] = window.tempData[name];\n};\nconst propsNovelsList = name => {\n  let numberNovels = window.tempData[name].length;\n  let count = numberNovels.toString().length;\n  let novel;\n  for (let i = 0; i < numberNovels; i++) {\n    novel = window.tempData[name][i];\n    novel.rank = i + 1 + \"\";\n    novel.rank = novel.rank.padStart(count, \"0\");\n    novel.cssRank = \"rank text-under-r-3\";\n  }\n  window.tempData[name][0].cssRank = \"rank text-r-1\";\n  window.tempData[name][1].cssRank = \"rank text-r-2\";\n  window.tempData[name][2].cssRank = \"rank text-r-3\";\n  window.data[name] = window.tempData[name];\n};\nconst propsTrendNovelsInMonth = () => {\n  window.data.trendNovelsInMonth = window.tempData.trendNovelsInMonth;\n};\nlet count = 1; //create to check update data, it will be delete when app is deployed\nconst requestData = () => {\n  fetch(\"http://localhost:4000/data\", {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(window.lastUpdatedTime)\n  }).then(response => response.json()).then(json => {\n    let updatedTime = json.lastUpdatedTime;\n    for (let section in json.lastUpdatedTime) {\n      //create to check update data, it will be delete when app is deployed\n      json.lastUpdatedTime[section] = json.lastUpdatedTime[section] + ++count;\n    }\n    window.tempData = json.data;\n    for (let section in updatedTime) {\n      if (updatedTime[section] !== window.lastUpdatedTime[section]) {\n        propsFunction[section](section);\n        window.setLastUpdatedTime[section](updatedTime[section]);\n      }\n    }\n    window.lastUpdatedTime = json.lastUpdatedTime;\n    setTimeout(requestData, 5000);\n  });\n};\nconst propsFunction = {\n  suggestedNovels: propsSuggestedNovels,\n  selectedTranslationNovels: propsShowNovels,\n  updatedNovels: propsUpdatedNovels,\n  fullNovels: propsShowNovels,\n  leftOfShortNovel: propsLeftOfShortNovel,\n  rightOfShortNovels: propsRightOfShortNovels,\n  reviewNovels: propsReviewNovels,\n  topGoodNovels: propsNovelsList,\n  newUpdateNovels: propsNovelsList,\n  trendNovelsInMonth: propsTrendNovelsInMonth\n};\n{\n  let request = new XMLHttpRequest();\n  request.open(\"GET\", \"http://localhost:4000/data\", false); //data.json is located in public folder\n  request.send();\n  let text = request.responseText;\n  let json = JSON.parse(text);\n  window.tempData = json.data;\n  for (let section in json.lastUpdatedTime) {\n    propsFunction[section](section);\n  }\n  for (let section in json.lastUpdatedTime) {\n    //create to check update data, it will be delete when app is deployed\n    json.lastUpdatedTime[section] = json.lastUpdatedTime[section] + ++count;\n  }\n  window.lastUpdatedTime = json.lastUpdatedTime;\n}\nsetTimeout(requestData, 10000);","map":{"version":3,"names":["useState","useRef","window","data","undefined","console","log","tempData","lastUpdatedTime","setLastUpdatedTime","suggestedNovels","selectedTranslationNovels","updatedNovels","fullNovels","leftOfShortNovel","rightOfShortNovels","reviewNovels","topGoodNovels","newUpdateNovels","trendNovelsInMonth","useUpdate","name","_s","setUpdatedTime","setUp","current","propsSuggestedNovels","length","Math","ceil","carousels","Array","i","cssCarousel","novels","image","require","titleNovel_","floor","push","propsShowNovels","forEach","propsUpdatedNovels","currentTime","Date","lastTime","last_time","millisecondsDelta","getTime","time","novel","title","before","after","propsLeftOfShortNovel","propsRightOfShortNovels","propsSimpleListOfNovels","propsReviewNovels","cssContainer","propsNovelsList","numberNovels","count","toString","rank","padStart","cssRank","propsTrendNovelsInMonth","requestData","fetch","method","headers","body","JSON","stringify","then","response","json","updatedTime","section","propsFunction","setTimeout","request","XMLHttpRequest","open","send","text","responseText","parse"],"sources":["D:/Code/Web/DocTruyenOnlineFullStackMySQL/client/src/updatedData.js"],"sourcesContent":["import { useState, useRef } from 'react';\r\n\r\n//check the existence of window.data, if window.data exists, it will be renamed, this codes will be deleted when web is deployed\r\n//kiểm tra sự tồn tại của window.data, nếu window.data tồn tại, nó sẽ được đổi tên, đoạn code này sẽ được xóa khi web được triển khai\r\nif (window.data !== undefined) {\r\n    console.log(\"data has been defined in window object\");\r\n}\r\nwindow.data = {};\r\n\r\nif (window.tempData !== undefined) {\r\n    console.log(\"data has been defined in window object\");\r\n}\r\nwindow.tempData = {};\r\n\r\nif (window.lastUpdatedTime !== undefined) {\r\n    console.log(\"lastUpdatedTime has been defined in window object\");\r\n}\r\nwindow.lastUpdatedTime = {};\r\n\r\nif (window.setLastUpdatedTime !== undefined) {\r\n    console.log(\"setLastUpdatedTime has been defined in window object\");\r\n}\r\nwindow.setLastUpdatedTime = {\r\n    suggestedNovels: \"\", selectedTranslationNovels: \"\", updatedNovels: \"\", fullNovels: \"\", leftOfShortNovel: \"\", rightOfShortNovels: \"\", \r\n    reviewNovels: \"\", topGoodNovels: \"\", newUpdateNovels: \"\", trendNovelsInMonth: \"\"\r\n};\r\n\r\nexport const useUpdate = name => {\r\n    let setUpdatedTime = useState(window.lastUpdatedTime[name])[1];\r\n    let setUp = useRef(false);\r\n\r\n    if (setUp.current === false) {\r\n        window.setLastUpdatedTime[name] = setUpdatedTime;\r\n        setUp.current = true;\r\n    }\r\n}\r\n\r\nconst propsSuggestedNovels = () => {\r\n    let length = Math.ceil(window.tempData.suggestedNovels.length/3);\r\n    let carousels = new Array(length);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        carousels[i] = {cssCarousel: \"carousel-item\", novels: []};\r\n    }\r\n\r\n    length = window.tempData.suggestedNovels.length;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        window.tempData.suggestedNovels[i].image = require(\"./images/\" + window.tempData.suggestedNovels[i].image);\r\n        titleNovel_(window.tempData.suggestedNovels[i]);\r\n        carousels[Math.floor(i/3)].novels.push(window.tempData.suggestedNovels[i]);\r\n    }\r\n\r\n    carousels[0].cssCarousel = \"carousel-item active\";\r\n\r\n    window.data.suggestedNovels = carousels;\r\n}\r\n\r\nconst propsShowNovels = (name) => {\r\n    for (let i = 0; i < window.tempData[name].length; i++) {\r\n        window.tempData[name][i].image = require(\"./images/\" + window.tempData[name][i].image);\r\n    }\r\n\r\n    window.tempData[name].forEach(titleNovel_);\r\n\r\n    window.data[name] = window.tempData[name];\r\n}\r\n\r\nconst propsUpdatedNovels = () => {\r\n    window.tempData.updatedNovels.forEach(titleNovel_);\r\n\r\n    window.data.updatedNovels = window.tempData.updatedNovels;\r\n\r\n    let currentTime = new Date(\"2023-11-11T09:00:00Z\");\r\n\r\n    for (let i = 0; i < window.data.updatedNovels.length; i++)\r\n    {\r\n        let lastTime = new Date(window.data.updatedNovels[i].last_time);\r\n        let millisecondsDelta = currentTime.getTime() - lastTime.getTime();\r\n        let time = Math.floor(millisecondsDelta/86400000);\r\n\r\n        if (time > 0) {\r\n            window.data.updatedNovels[i].time = time + \" ngày trước\";\r\n        } else {\r\n            time = Math.floor(millisecondsDelta/3600000);\r\n\r\n            if (time > 0) {\r\n                window.data.updatedNovels[i].time = time + \" giờ trước\";\r\n            } else {\r\n                time = Math.floor(millisecondsDelta/60000);\r\n\r\n                if (time > 0) {\r\n                    window.data.updatedNovels[i].time = time + \" phút trước\";\r\n                } else {\r\n                    window.data.updatedNovels[i].time = \"mới cập nhật\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst titleNovel_ = novel => {\r\n    novel.title = (novel.before !== \"\") ? (novel.before + \" \" + novel.name) : novel.name;\r\n    novel.title = (novel.after !== \"\") ? (novel.title + \" \" + novel.after) : novel.title;\r\n}\r\n\r\nconst propsLeftOfShortNovel = () => {\r\n    window.tempData.leftOfShortNovel.image = require(\"./images/\" + window.tempData.leftOfShortNovel.image);\r\n    window.data.leftOfShortNovel = window.tempData.leftOfShortNovel;\r\n}\r\n\r\nconst propsRightOfShortNovels = () => {\r\n    propsSimpleListOfNovels(\"rightOfShortNovels\", \"d-flex pb-short-novel\");\r\n}\r\n\r\nconst propsReviewNovels = () => {\r\n    propsSimpleListOfNovels(\"reviewNovels\", \"d-flex p-short-novel\");\r\n}\r\n\r\nconst propsSimpleListOfNovels = (name, cssContainer) => {\r\n    for (let i = 0; i < window.tempData[name].length; i++) {\r\n        window.tempData[name][i].image = require(\"./images/\" + window.tempData[name][i].image);\r\n        window.tempData[name][i].cssContainer = cssContainer;\r\n    }\r\n\r\n    window.data[name] = window.tempData[name];\r\n}\r\n\r\nconst propsNovelsList = (name) => {\r\n    let numberNovels = window.tempData[name].length;\r\n    let count = numberNovels.toString().length;\r\n    let novel;\r\n\r\n    for (let i = 0; i < numberNovels; i++) {\r\n        novel = window.tempData[name][i];\r\n        novel.rank = (i + 1) + \"\";\r\n        novel.rank = novel.rank.padStart(count, \"0\");\r\n        novel.cssRank = \"rank text-under-r-3\";\r\n    }\r\n\r\n    window.tempData[name][0].cssRank = \"rank text-r-1\";\r\n    window.tempData[name][1].cssRank = \"rank text-r-2\";\r\n    window.tempData[name][2].cssRank = \"rank text-r-3\";\r\n\r\n    window.data[name] = window.tempData[name];\r\n}\r\n\r\nconst propsTrendNovelsInMonth = () => {\r\n    window.data.trendNovelsInMonth = window.tempData.trendNovelsInMonth;\r\n}\r\n\r\nlet count = 1;//create to check update data, it will be delete when app is deployed\r\nconst requestData = () => {\r\n    fetch(\"http://localhost:4000/data\", {\r\n        method:'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(window.lastUpdatedTime)\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => {\r\n        let updatedTime = json.lastUpdatedTime;\r\n\r\n        for (let section in json.lastUpdatedTime) {//create to check update data, it will be delete when app is deployed\r\n            json.lastUpdatedTime[section] = json.lastUpdatedTime[section] + (++count);\r\n        }\r\n\r\n        window.tempData = json.data;\r\n\r\n        for (let section in updatedTime) {\r\n            if (updatedTime[section] !== window.lastUpdatedTime[section]) {\r\n                propsFunction[section](section);\r\n                window.setLastUpdatedTime[section](updatedTime[section]);\r\n            }\r\n        }\r\n\r\n        window.lastUpdatedTime = json.lastUpdatedTime;\r\n        setTimeout(requestData, 5000);\r\n    });\r\n}\r\n\r\nconst propsFunction = {\r\n    suggestedNovels: propsSuggestedNovels, selectedTranslationNovels: propsShowNovels, updatedNovels: propsUpdatedNovels, \r\n    fullNovels: propsShowNovels, leftOfShortNovel: propsLeftOfShortNovel, rightOfShortNovels: propsRightOfShortNovels, \r\n    reviewNovels: propsReviewNovels, topGoodNovels: propsNovelsList, newUpdateNovels: propsNovelsList, \r\n    trendNovelsInMonth: propsTrendNovelsInMonth\r\n};\r\n\r\n{\r\n    let request = new XMLHttpRequest();\r\n    request.open(\"GET\", \"http://localhost:4000/data\", false);//data.json is located in public folder\r\n    request.send();\r\n\r\n    let text = request.responseText;\r\n    let json = JSON.parse(text);\r\n\r\n    window.tempData = json.data;\r\n\r\n    for (let section in json.lastUpdatedTime) {\r\n        propsFunction[section](section);\r\n    }\r\n\r\n    for (let section in json.lastUpdatedTime) {//create to check update data, it will be delete when app is deployed\r\n        json.lastUpdatedTime[section] = json.lastUpdatedTime[section] + (++count);\r\n    }\r\n\r\n    window.lastUpdatedTime = json.lastUpdatedTime;\r\n}\r\n\r\nsetTimeout(requestData, 10000);"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;;AAExC;AACA;AACA,IAAIC,MAAM,CAACC,IAAI,KAAKC,SAAS,EAAE;EAC3BC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;AACzD;AACAJ,MAAM,CAACC,IAAI,GAAG,CAAC,CAAC;AAEhB,IAAID,MAAM,CAACK,QAAQ,KAAKH,SAAS,EAAE;EAC/BC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;AACzD;AACAJ,MAAM,CAACK,QAAQ,GAAG,CAAC,CAAC;AAEpB,IAAIL,MAAM,CAACM,eAAe,KAAKJ,SAAS,EAAE;EACtCC,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;AACpE;AACAJ,MAAM,CAACM,eAAe,GAAG,CAAC,CAAC;AAE3B,IAAIN,MAAM,CAACO,kBAAkB,KAAKL,SAAS,EAAE;EACzCC,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;AACvE;AACAJ,MAAM,CAACO,kBAAkB,GAAG;EACxBC,eAAe,EAAE,EAAE;EAAEC,yBAAyB,EAAE,EAAE;EAAEC,aAAa,EAAE,EAAE;EAAEC,UAAU,EAAE,EAAE;EAAEC,gBAAgB,EAAE,EAAE;EAAEC,kBAAkB,EAAE,EAAE;EACnIC,YAAY,EAAE,EAAE;EAAEC,aAAa,EAAE,EAAE;EAAEC,eAAe,EAAE,EAAE;EAAEC,kBAAkB,EAAE;AAClF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGC,IAAI,IAAI;EAAAC,EAAA;EAC7B,IAAIC,cAAc,GAAGvB,QAAQ,CAACE,MAAM,CAACM,eAAe,CAACa,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9D,IAAIG,KAAK,GAAGvB,MAAM,CAAC,KAAK,CAAC;EAEzB,IAAIuB,KAAK,CAACC,OAAO,KAAK,KAAK,EAAE;IACzBvB,MAAM,CAACO,kBAAkB,CAACY,IAAI,CAAC,GAAGE,cAAc;IAChDC,KAAK,CAACC,OAAO,GAAG,IAAI;EACxB;AACJ,CAAC;AAAAH,EAAA,CARYF,SAAS;AAUtB,MAAMM,oBAAoB,GAAGA,CAAA,KAAM;EAC/B,IAAIC,MAAM,GAAGC,IAAI,CAACC,IAAI,CAAC3B,MAAM,CAACK,QAAQ,CAACG,eAAe,CAACiB,MAAM,GAAC,CAAC,CAAC;EAChE,IAAIG,SAAS,GAAG,IAAIC,KAAK,CAACJ,MAAM,CAAC;EAEjC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;IAC7BF,SAAS,CAACE,CAAC,CAAC,GAAG;MAACC,WAAW,EAAE,eAAe;MAAEC,MAAM,EAAE;IAAE,CAAC;EAC7D;EAEAP,MAAM,GAAGzB,MAAM,CAACK,QAAQ,CAACG,eAAe,CAACiB,MAAM;EAE/C,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;IAC7B9B,MAAM,CAACK,QAAQ,CAACG,eAAe,CAACsB,CAAC,CAAC,CAACG,KAAK,GAAGC,OAAO,CAAC,WAAW,GAAGlC,MAAM,CAACK,QAAQ,CAACG,eAAe,CAACsB,CAAC,CAAC,CAACG,KAAK,CAAC;IAC1GE,WAAW,CAACnC,MAAM,CAACK,QAAQ,CAACG,eAAe,CAACsB,CAAC,CAAC,CAAC;IAC/CF,SAAS,CAACF,IAAI,CAACU,KAAK,CAACN,CAAC,GAAC,CAAC,CAAC,CAAC,CAACE,MAAM,CAACK,IAAI,CAACrC,MAAM,CAACK,QAAQ,CAACG,eAAe,CAACsB,CAAC,CAAC,CAAC;EAC9E;EAEAF,SAAS,CAAC,CAAC,CAAC,CAACG,WAAW,GAAG,sBAAsB;EAEjD/B,MAAM,CAACC,IAAI,CAACO,eAAe,GAAGoB,SAAS;AAC3C,CAAC;AAED,MAAMU,eAAe,GAAInB,IAAI,IAAK;EAC9B,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAACM,MAAM,EAAEK,CAAC,EAAE,EAAE;IACnD9B,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAACW,CAAC,CAAC,CAACG,KAAK,GAAGC,OAAO,CAAC,WAAW,GAAGlC,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAACW,CAAC,CAAC,CAACG,KAAK,CAAC;EAC1F;EAEAjC,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAACoB,OAAO,CAACJ,WAAW,CAAC;EAE1CnC,MAAM,CAACC,IAAI,CAACkB,IAAI,CAAC,GAAGnB,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC;AAC7C,CAAC;AAED,MAAMqB,kBAAkB,GAAGA,CAAA,KAAM;EAC7BxC,MAAM,CAACK,QAAQ,CAACK,aAAa,CAAC6B,OAAO,CAACJ,WAAW,CAAC;EAElDnC,MAAM,CAACC,IAAI,CAACS,aAAa,GAAGV,MAAM,CAACK,QAAQ,CAACK,aAAa;EAEzD,IAAI+B,WAAW,GAAG,IAAIC,IAAI,CAAC,sBAAsB,CAAC;EAElD,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,MAAM,CAACC,IAAI,CAACS,aAAa,CAACe,MAAM,EAAEK,CAAC,EAAE,EACzD;IACI,IAAIa,QAAQ,GAAG,IAAID,IAAI,CAAC1C,MAAM,CAACC,IAAI,CAACS,aAAa,CAACoB,CAAC,CAAC,CAACc,SAAS,CAAC;IAC/D,IAAIC,iBAAiB,GAAGJ,WAAW,CAACK,OAAO,EAAE,GAAGH,QAAQ,CAACG,OAAO,EAAE;IAClE,IAAIC,IAAI,GAAGrB,IAAI,CAACU,KAAK,CAACS,iBAAiB,GAAC,QAAQ,CAAC;IAEjD,IAAIE,IAAI,GAAG,CAAC,EAAE;MACV/C,MAAM,CAACC,IAAI,CAACS,aAAa,CAACoB,CAAC,CAAC,CAACiB,IAAI,GAAGA,IAAI,GAAG,aAAa;IAC5D,CAAC,MAAM;MACHA,IAAI,GAAGrB,IAAI,CAACU,KAAK,CAACS,iBAAiB,GAAC,OAAO,CAAC;MAE5C,IAAIE,IAAI,GAAG,CAAC,EAAE;QACV/C,MAAM,CAACC,IAAI,CAACS,aAAa,CAACoB,CAAC,CAAC,CAACiB,IAAI,GAAGA,IAAI,GAAG,YAAY;MAC3D,CAAC,MAAM;QACHA,IAAI,GAAGrB,IAAI,CAACU,KAAK,CAACS,iBAAiB,GAAC,KAAK,CAAC;QAE1C,IAAIE,IAAI,GAAG,CAAC,EAAE;UACV/C,MAAM,CAACC,IAAI,CAACS,aAAa,CAACoB,CAAC,CAAC,CAACiB,IAAI,GAAGA,IAAI,GAAG,aAAa;QAC5D,CAAC,MAAM;UACH/C,MAAM,CAACC,IAAI,CAACS,aAAa,CAACoB,CAAC,CAAC,CAACiB,IAAI,GAAG,cAAc;QACtD;MACJ;IACJ;EACJ;AACJ,CAAC;AAED,MAAMZ,WAAW,GAAGa,KAAK,IAAI;EACzBA,KAAK,CAACC,KAAK,GAAID,KAAK,CAACE,MAAM,KAAK,EAAE,GAAKF,KAAK,CAACE,MAAM,GAAG,GAAG,GAAGF,KAAK,CAAC7B,IAAI,GAAI6B,KAAK,CAAC7B,IAAI;EACpF6B,KAAK,CAACC,KAAK,GAAID,KAAK,CAACG,KAAK,KAAK,EAAE,GAAKH,KAAK,CAACC,KAAK,GAAG,GAAG,GAAGD,KAAK,CAACG,KAAK,GAAIH,KAAK,CAACC,KAAK;AACxF,CAAC;AAED,MAAMG,qBAAqB,GAAGA,CAAA,KAAM;EAChCpD,MAAM,CAACK,QAAQ,CAACO,gBAAgB,CAACqB,KAAK,GAAGC,OAAO,CAAC,WAAW,GAAGlC,MAAM,CAACK,QAAQ,CAACO,gBAAgB,CAACqB,KAAK,CAAC;EACtGjC,MAAM,CAACC,IAAI,CAACW,gBAAgB,GAAGZ,MAAM,CAACK,QAAQ,CAACO,gBAAgB;AACnE,CAAC;AAED,MAAMyC,uBAAuB,GAAGA,CAAA,KAAM;EAClCC,uBAAuB,CAAC,oBAAoB,EAAE,uBAAuB,CAAC;AAC1E,CAAC;AAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC5BD,uBAAuB,CAAC,cAAc,EAAE,sBAAsB,CAAC;AACnE,CAAC;AAED,MAAMA,uBAAuB,GAAGA,CAACnC,IAAI,EAAEqC,YAAY,KAAK;EACpD,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAACM,MAAM,EAAEK,CAAC,EAAE,EAAE;IACnD9B,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAACW,CAAC,CAAC,CAACG,KAAK,GAAGC,OAAO,CAAC,WAAW,GAAGlC,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAACW,CAAC,CAAC,CAACG,KAAK,CAAC;IACtFjC,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAACW,CAAC,CAAC,CAAC0B,YAAY,GAAGA,YAAY;EACxD;EAEAxD,MAAM,CAACC,IAAI,CAACkB,IAAI,CAAC,GAAGnB,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC;AAC7C,CAAC;AAED,MAAMsC,eAAe,GAAItC,IAAI,IAAK;EAC9B,IAAIuC,YAAY,GAAG1D,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAACM,MAAM;EAC/C,IAAIkC,KAAK,GAAGD,YAAY,CAACE,QAAQ,EAAE,CAACnC,MAAM;EAC1C,IAAIuB,KAAK;EAET,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4B,YAAY,EAAE5B,CAAC,EAAE,EAAE;IACnCkB,KAAK,GAAGhD,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAACW,CAAC,CAAC;IAChCkB,KAAK,CAACa,IAAI,GAAI/B,CAAC,GAAG,CAAC,GAAI,EAAE;IACzBkB,KAAK,CAACa,IAAI,GAAGb,KAAK,CAACa,IAAI,CAACC,QAAQ,CAACH,KAAK,EAAE,GAAG,CAAC;IAC5CX,KAAK,CAACe,OAAO,GAAG,qBAAqB;EACzC;EAEA/D,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC4C,OAAO,GAAG,eAAe;EAClD/D,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC4C,OAAO,GAAG,eAAe;EAClD/D,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC4C,OAAO,GAAG,eAAe;EAElD/D,MAAM,CAACC,IAAI,CAACkB,IAAI,CAAC,GAAGnB,MAAM,CAACK,QAAQ,CAACc,IAAI,CAAC;AAC7C,CAAC;AAED,MAAM6C,uBAAuB,GAAGA,CAAA,KAAM;EAClChE,MAAM,CAACC,IAAI,CAACgB,kBAAkB,GAAGjB,MAAM,CAACK,QAAQ,CAACY,kBAAkB;AACvE,CAAC;AAED,IAAI0C,KAAK,GAAG,CAAC,CAAC;AACd,MAAMM,WAAW,GAAGA,CAAA,KAAM;EACtBC,KAAK,CAAC,4BAA4B,EAAE;IAChCC,MAAM,EAAC,MAAM;IACbC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACvE,MAAM,CAACM,eAAe;EAC/C,CAAC,CAAC,CACDkE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACE,IAAI,IAAI;IACV,IAAIC,WAAW,GAAGD,IAAI,CAACpE,eAAe;IAEtC,KAAK,IAAIsE,OAAO,IAAIF,IAAI,CAACpE,eAAe,EAAE;MAAC;MACvCoE,IAAI,CAACpE,eAAe,CAACsE,OAAO,CAAC,GAAGF,IAAI,CAACpE,eAAe,CAACsE,OAAO,CAAC,GAAI,EAAEjB,KAAM;IAC7E;IAEA3D,MAAM,CAACK,QAAQ,GAAGqE,IAAI,CAACzE,IAAI;IAE3B,KAAK,IAAI2E,OAAO,IAAID,WAAW,EAAE;MAC7B,IAAIA,WAAW,CAACC,OAAO,CAAC,KAAK5E,MAAM,CAACM,eAAe,CAACsE,OAAO,CAAC,EAAE;QAC1DC,aAAa,CAACD,OAAO,CAAC,CAACA,OAAO,CAAC;QAC/B5E,MAAM,CAACO,kBAAkB,CAACqE,OAAO,CAAC,CAACD,WAAW,CAACC,OAAO,CAAC,CAAC;MAC5D;IACJ;IAEA5E,MAAM,CAACM,eAAe,GAAGoE,IAAI,CAACpE,eAAe;IAC7CwE,UAAU,CAACb,WAAW,EAAE,IAAI,CAAC;EACjC,CAAC,CAAC;AACN,CAAC;AAED,MAAMY,aAAa,GAAG;EAClBrE,eAAe,EAAEgB,oBAAoB;EAAEf,yBAAyB,EAAE6B,eAAe;EAAE5B,aAAa,EAAE8B,kBAAkB;EACpH7B,UAAU,EAAE2B,eAAe;EAAE1B,gBAAgB,EAAEwC,qBAAqB;EAAEvC,kBAAkB,EAAEwC,uBAAuB;EACjHvC,YAAY,EAAEyC,iBAAiB;EAAExC,aAAa,EAAE0C,eAAe;EAAEzC,eAAe,EAAEyC,eAAe;EACjGxC,kBAAkB,EAAE+C;AACxB,CAAC;AAED;EACI,IAAIe,OAAO,GAAG,IAAIC,cAAc,EAAE;EAClCD,OAAO,CAACE,IAAI,CAAC,KAAK,EAAE,4BAA4B,EAAE,KAAK,CAAC,CAAC;EACzDF,OAAO,CAACG,IAAI,EAAE;EAEd,IAAIC,IAAI,GAAGJ,OAAO,CAACK,YAAY;EAC/B,IAAIV,IAAI,GAAGJ,IAAI,CAACe,KAAK,CAACF,IAAI,CAAC;EAE3BnF,MAAM,CAACK,QAAQ,GAAGqE,IAAI,CAACzE,IAAI;EAE3B,KAAK,IAAI2E,OAAO,IAAIF,IAAI,CAACpE,eAAe,EAAE;IACtCuE,aAAa,CAACD,OAAO,CAAC,CAACA,OAAO,CAAC;EACnC;EAEA,KAAK,IAAIA,OAAO,IAAIF,IAAI,CAACpE,eAAe,EAAE;IAAC;IACvCoE,IAAI,CAACpE,eAAe,CAACsE,OAAO,CAAC,GAAGF,IAAI,CAACpE,eAAe,CAACsE,OAAO,CAAC,GAAI,EAAEjB,KAAM;EAC7E;EAEA3D,MAAM,CAACM,eAAe,GAAGoE,IAAI,CAACpE,eAAe;AACjD;AAEAwE,UAAU,CAACb,WAAW,EAAE,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}